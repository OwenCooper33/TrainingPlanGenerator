import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Main extends JFrame {
    private JTextField goalMileageField;
    private JTextField dailyMileageField;
    private JTextArea planArea;
    private JButton generateButton;
    private JLabel fileLinkLabel;
    private String fileName = "RoundTheIslandPlan.txt";

    public Main() {
        setTitle("Training Plan Generator");
        setSize(500, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(0, 1));
        panel.setBackground(Color.PINK);

        JLabel goalMileageLabel = new JLabel("Enter your event length:");
        goalMileageLabel.setForeground(Color.BLUE);
        panel.add(goalMileageLabel);
        goalMileageField = new JTextField();
        goalMileageField.setBackground(Color.WHITE);
        goalMileageField.setForeground(Color.BLACK);
        panel.add(goalMileageField);

        JLabel dailyMileageLabel = new JLabel("Enter your current average run length:");
        dailyMileageLabel.setForeground(Color.BLUE);
        panel.add(dailyMileageLabel);
        dailyMileageField = new JTextField();
        dailyMileageField.setBackground(Color.WHITE);
        dailyMileageField.setForeground(Color.BLACK);
        panel.add(dailyMileageField);

        generateButton = new JButton("Generate Plan");
        generateButton.setBackground(Color.DARK_GRAY);
        generateButton.setForeground(Color.WHITE);
        panel.add(generateButton);

        planArea = new JTextArea();
        planArea.setBackground(Color.WHITE);
        planArea.setForeground(Color.BLACK);
        planArea.setEditable(false);
        panel.add(new JScrollPane(planArea));

        fileLinkLabel = new JLabel();
        fileLinkLabel.setForeground(Color.BLUE);
        fileLinkLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        fileLinkLabel.setText("<html><u>Download your training plan</u></html>");
        fileLinkLabel.setVisible(false);
        fileLinkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openFile();
            }
        });
        panel.add(fileLinkLabel);

        add(panel);

        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                generatePlan();
            }
        });
    }

    private void generatePlan() {
        double goalMileage;
        double dailyMileage;
        try {
            goalMileage = Double.parseDouble(goalMileageField.getText());
            dailyMileage = Double.parseDouble(dailyMileageField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid numbers.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double longRun = dailyMileage * 1.7;
        int weeks = calculateWeeks(longRun, goalMileage);
        double weeklyMileage = dailyMileage * 4 + longRun;

        String[] plan = new String[weeks];

        StringBuilder planText = new StringBuilder();

        for (int i = 0; i < weeks; i++) {
            String weeklyWorkouts = "Week: " + (i + 1) + " Total Mileage: " + Math.round(weeklyMileage * 2) / 2.0 + "\n" +
                    "Monday: " + Math.round(dailyMileage * 2) / 2.0 + " miles easy\n" +
                    "Tuesday: ~" + Math.round((dailyMileage - 0.2 * dailyMileage) * 2) / 2.0 + " miles hill repeats\n" +
                    "Wednesday: rest\n" +
                    "Thursday: " + Math.round((dailyMileage + 0.2 * dailyMileage) * 2) / 2.0 + " miles tempo\n" +
                    "Friday: " + Math.round(dailyMileage * 2) / 2.0 + " miles easy\n" +
                    "Saturday: " + Math.round(longRun * 2) / 2.0 + " miles easy\n" +
                    "Sunday: rest\n\n";
            plan[i] = weeklyWorkouts;
            planText.append(weeklyWorkouts);
            dailyMileage *= 1.15;
            longRun *= 1.15;
            weeklyMileage *= 1.15;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            for (String week : plan) {
                writer.write(week);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        planArea.setText(planText.toString());
        fileLinkLabel.setVisible(true);
    }

    private void openFile() {
        try {
            File file = new File(fileName);
            if (file.exists()) {
                Desktop.getDesktop().open(file);
            } else {
                JOptionPane.showMessageDialog(this, "File not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static int calculateWeeks(double start, double end) {
        int weeks = 0;
        while (start <= end * 0.7) {
            start *= 1.14;
            weeks++;
        }
        return weeks;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Main frame = new Main();
                frame.setVisible(true);
            }
        });
    }
}
